section .bss
    buffer resb 256 ; резервируем область памяти на 256 байт

section .text
    global _start

_start:
    mov rsi, buffer    ; установка начального адреса области памяти
    mov rcx, 256       ; установка размера области в байтах

    ; вызываем подпрограмму заполнения памяти
    call fill_memory

    ; завершение программы
    mov rax, 60        ; номер системного вызова для выхода
    xor rdi, rdi       ; код завершения 0
    syscall

fill_memory:
    mov al, 0x06       ; первый байт для записи
    mov bl, 0x09       ; второй байт для записи

fill_loop:
    mov [rsi], al      ; записываем байт 0x06
    inc rsi            ; увеличиваем указатель
    loop_skip_check:
        dec rcx        ; уменьшаем счетчик
        jz done        ; если rcx стал 0, выходим

    mov [rsi], bl      ; записываем байт 0x09
    inc rsi            ; увеличиваем указатель
    dec rcx            ; уменьшаем счетчик
    jz done            ; если rcx стал 0, выходим

    jmp fill_loop      ; повторяем цикл

done:
    ret                ; возвращаемся из подпрограммы


section .bss
    buffer resb 256  ; резервируем область памяти на 256 байт

section .data
    newline db 10    ; символ новой строки

section .text
    global _start

_start:
    mov rsi, buffer   ; установка начального адреса области памяти
    mov rcx, 256      ; установка размера области в байтах

    ; вызываем подпрограмму заполнения памяти
    call fill_memory

    ; выводим содержимое заполненной памяти
    mov rsi, buffer   ; начальный адрес области памяти
    mov rdx, 256      ; размер области в байтах
    call print_memory

    ; завершение программы
    mov rax, 60       ; номер системного вызова для выхода
    xor rdi, rdi      ; код завершения 0
    syscall

fill_memory:
    mov al, 0x06      ; первый байт для записи
    mov bl, 0x09      ; второй байт для записи

fill_loop:
    mov [rsi], al     ; записываем байт 0x06
    inc rsi           ; увеличиваем указатель
    dec rcx           ; уменьшаем счетчик
    jz done           ; если rcx стал 0, выходим

    mov [rsi], bl     ; записываем байт 0x09
    inc rsi           ; увеличиваем указатель
    dec rcx           ; уменьшаем счетчик
    jz done           ; если rcx стал 0, выходим

    jmp fill_loop     ; повторяем цикл

done:
    ret               ; возвращаемся из подпрограммы

print_memory:
    mov rax, 1        ; системный вызов для write
    mov rdi, 1        ; файловый дескриптор для stdout
    syscall

    ; выводим символ новой строки
    mov rax, 1        ; системный вызов для write
    mov rdi, 1        ; файловый дескриптор для stdout
    mov rsi, newline  ; адрес символа новой строки
    mov rdx, 1        ; длина символа новой строки
    syscall

    ret               ; возвращаемся из подпрограммы

